import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "首页"
  String get Front_Page => "首页";
  /// "订阅"
  String get Watched => "订阅";
  /// "热门"
  String get Popular => "热门";
  /// "收藏"
  String get Favorites => "收藏";
  /// "历史"
  String get Histories => "历史";
  /// "设置"
  String get Setting => "设置";
  /// "复制"
  String get Copy => "复制";
  /// "取消"
  String get Cancel => "取消";
  /// "查看更多"
  String get More => "查看更多";
  /// "加载中"
  String get Loading => "加载中";
  /// "到底了"
  String get Reach_End => "到底了";
  /// "高级设置"
  String get Advanced => "高级设置";
  /// "语言"
  String get Language => "语言";
  /// "跟随系统"
  String get FollowSystem => "跟随系统";
  /// "在 Ehentai 中打开"
  String get OpenEH => "在 Ehentai 中打开";
  /// "关于"
  String get About => "关于";
  /// "作者"
  String get AboutAuthor => "作者";
  /// "源代码"
  String get AboutSource => "源代码";
  /// "开源证书"
  String get AboutLicense => "开源证书";
  /// "版本"
  String get AboutVersion => "版本";
  /// "EhentaiView 是 E-hentai.org 的非官方项目"
  String get AboutEhentaiViewDesc => "EhentaiView 是 E-hentai.org 的非官方项目";
  /// "主题"
  String get Theme => "主题";
  /// "亮色"
  String get ThemeLight => "亮色";
  /// "暗色"
  String get ThemeDark => "暗色";
  /// "登录"
  String get Sign_In => "登录";
  /// "欢迎使用 FHentai"
  String get Sign_InWelcome => "欢迎使用 FHentai";
  /// "邮箱"
  String get Sign_InEmail => "邮箱";
  /// "使用 Cookie 登录"
  String get Sign_InCookie => "使用 Cookie 登录";
  /// "帐号"
  String get Sign_InEmail_Address => "帐号";
  /// "密码"
  String get Sign_InPassword => "密码";
  /// "游客模式"
  String get Sign_InNO_Sign_In => "游客模式";
  /// "不能为空"
  String get Sign_InEmpty => "不能为空";
  /// "游客"
  String get Sign_InVisitor => "游客";
  /// "暂无评论"
  String get GNo_Comments => "暂无评论";
  /// "评论列表"
  String get GComments => "评论列表";
  /// "暂无标签"
  String get GNo_Tags => "暂无标签";
  /// "上传时间"
  String get GTorrentAdded => "上传时间";
  /// "大小"
  String get GTorrentSize => "大小";
  /// "Torrent 大小"
  String get GTorrentTsize => "Torrent 大小";
  /// "添加收藏"
  String get GFavoriteAdd => "添加收藏";
  /// "画廊信息"
  String get GGallery_Info => "画廊信息";
  /// "键"
  String get GGallery_InfoKey => "键";
  /// "值"
  String get GGallery_InfoValue => "值";
  /// "gid"
  String get GGallery_InfoGid => "gid";
  /// "token"
  String get GGallery_InfoToken => "token";
  /// "标题"
  String get GGallery_InfoTitle => "标题";
  /// "日文标题"
  String get GGallery_InfoTitle_jpn => "日文标题";
  /// "分类"
  String get GGallery_InfoCategory => "分类";
  /// "缩略图"
  String get GGallery_InfoThumb => "缩略图";
  /// "上传者"
  String get GGallery_InfoUploader => "上传者";
  /// "上传时间"
  String get GGallery_InfoPosted => "上传时间";
  /// "页数"
  String get GGallery_InfoFilecount => "页数";
  /// "大小"
  String get GGallery_InfoFilesize => "大小";
  /// "评价"
  String get GGallery_InfoRating => "评价";
  /// "上传时间"
  String get GGallery_InfoTime => "上传时间";
  /// "链接"
  String get GGallery_InfoUrl => "链接";
  /// "评价次数"
  String get GGallery_InfoRating_count => "评价次数";
  /// "收藏次数"
  String get GGallery_InfoFavcount => "收藏次数";
  /// "收藏夹"
  String get GGallery_InfoFavoritelink => "收藏夹";
  /// "用户"
  String get EHUser => "用户";
  /// "登出"
  String get EHLogout => "登出";
  /// "确定退出？"
  String get EHLogoutContent => "确定退出？";
  /// "用户Cookie"
  String get EHUser_Cookie => "用户Cookie";
  /// "设置"
  String get EHSetting => "设置";
  /// "画廊切换"
  String get EHEhentai_Switch => "画廊切换";
  /// "Ehentai 设置"
  String get EHEhentai_Setting => "Ehentai 设置";
  /// "EHentai 标签管理"
  String get EHEhentai_Tags => "EHentai 标签管理";
  /// "注意信息安全"
  String get EHKEEP_IT_SAFE => "注意信息安全";
  /// "搜索"
  String get Search => "搜索";
  /// "输入内容不能少于2字符"
  String get SearchShort => "输入内容不能少于2字符";
  /// "什么都没找到"
  String get SearchNot_found => "什么都没找到";
  /// "下载"
  String get Download => "下载";
  /// "下载进度"
  String get DownloadProgress => "下载进度";
  /// "错误信息"
  String get DownloadError_Info => "错误信息";
  /// "完成"
  String get DownloadDone => "完成";
  /// "缓冲区"
  String get DownloadBuffer => "缓冲区";
  /// "总数"
  String get DownloadTotal => "总数";
  /// "保存到本地"
  String get DownloadSave_Local => "保存到本地";
}

class _I18n_zh_CN extends I18n {
  const _I18n_zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  /// "Front Page"
  @override
  String get Front_Page => "Front Page";
  /// "Watched"
  @override
  String get Watched => "Watched";
  /// "Popular"
  @override
  String get Popular => "Popular";
  /// "Favorites"
  @override
  String get Favorites => "Favorites";
  /// "Histories"
  @override
  String get Histories => "Histories";
  /// "Setting"
  @override
  String get Setting => "Setting";
  /// "Copy"
  @override
  String get Copy => "Copy";
  /// "Cancel"
  @override
  String get Cancel => "Cancel";
  /// "More"
  @override
  String get More => "More";
  /// "Loading"
  @override
  String get Loading => "Loading";
  /// "Reach End"
  @override
  String get Reach_End => "Reach End";
  /// "Advanced"
  @override
  String get Advanced => "Advanced";
  /// "Language"
  @override
  String get Language => "Language";
  /// "System"
  @override
  String get FollowSystem => "System";
  /// "Open in EHentai"
  @override
  String get OpenEH => "Open in EHentai";
  /// "About"
  @override
  String get About => "About";
  /// "Author"
  @override
  String get AboutAuthor => "Author";
  /// "Source"
  @override
  String get AboutSource => "Source";
  /// "License"
  @override
  String get AboutLicense => "License";
  /// "Version"
  @override
  String get AboutVersion => "Version";
  /// "EhentaiView is not affiliated with E-hentai.org in any way"
  @override
  String get AboutEhentaiViewDesc => "EhentaiView is not affiliated with E-hentai.org in any way";
  /// "Theme"
  @override
  String get Theme => "Theme";
  /// "Light"
  @override
  String get ThemeLight => "Light";
  /// "Dark"
  @override
  String get ThemeDark => "Dark";
  /// "Sign In"
  @override
  String get Sign_In => "Sign In";
  /// "Welcome FHentai"
  @override
  String get Sign_InWelcome => "Welcome FHentai";
  /// "Email"
  @override
  String get Sign_InEmail => "Email";
  /// "Use Cookie"
  @override
  String get Sign_InCookie => "Use Cookie";
  /// "Email Address"
  @override
  String get Sign_InEmail_Address => "Email Address";
  /// "Password"
  @override
  String get Sign_InPassword => "Password";
  /// "Tourist Mode"
  @override
  String get Sign_InNO_Sign_In => "Tourist Mode";
  /// "Please enter some text"
  @override
  String get Sign_InEmpty => "Please enter some text";
  /// "Visitor"
  @override
  String get Sign_InVisitor => "Visitor";
  /// "no comments"
  @override
  String get GNo_Comments => "no comments";
  /// "Comments"
  @override
  String get GComments => "Comments";
  /// "No tags have been added for this gallery yet"
  @override
  String get GNo_Tags => "No tags have been added for this gallery yet";
  /// "Added"
  @override
  String get GTorrentAdded => "Added";
  /// "Size"
  @override
  String get GTorrentSize => "Size";
  /// "Torrent size"
  @override
  String get GTorrentTsize => "Torrent size";
  /// "Add to Favorites"
  @override
  String get GFavoriteAdd => "Add to Favorites";
  /// "Gallery Info"
  @override
  String get GGallery_Info => "Gallery Info";
  /// "Key"
  @override
  String get GGallery_InfoKey => "Key";
  /// "Value"
  @override
  String get GGallery_InfoValue => "Value";
  /// "gid"
  @override
  String get GGallery_InfoGid => "gid";
  /// "token"
  @override
  String get GGallery_InfoToken => "token";
  /// "Title"
  @override
  String get GGallery_InfoTitle => "Title";
  /// "Title jpn"
  @override
  String get GGallery_InfoTitle_jpn => "Title jpn";
  /// "Category"
  @override
  String get GGallery_InfoCategory => "Category";
  /// "Thumb"
  @override
  String get GGallery_InfoThumb => "Thumb";
  /// "Uploader"
  @override
  String get GGallery_InfoUploader => "Uploader";
  /// "Posted"
  @override
  String get GGallery_InfoPosted => "Posted";
  /// "Length"
  @override
  String get GGallery_InfoFilecount => "Length";
  /// "Filesize"
  @override
  String get GGallery_InfoFilesize => "Filesize";
  /// "Rating"
  @override
  String get GGallery_InfoRating => "Rating";
  /// "Posted"
  @override
  String get GGallery_InfoTime => "Posted";
  /// "URL"
  @override
  String get GGallery_InfoUrl => "URL";
  /// "Rating count"
  @override
  String get GGallery_InfoRating_count => "Rating count";
  /// "Favcount"
  @override
  String get GGallery_InfoFavcount => "Favcount";
  /// "Favoritelink"
  @override
  String get GGallery_InfoFavoritelink => "Favoritelink";
  /// "User"
  @override
  String get EHUser => "User";
  /// "Logout"
  @override
  String get EHLogout => "Logout";
  /// "Are you sure?"
  @override
  String get EHLogoutContent => "Are you sure?";
  /// "User Cookie"
  @override
  String get EHUser_Cookie => "User Cookie";
  /// "Setting"
  @override
  String get EHSetting => "Setting";
  /// "Gallery Switch"
  @override
  String get EHEhentai_Switch => "Gallery Switch";
  /// "Ehentai Setting"
  @override
  String get EHEhentai_Setting => "Ehentai Setting";
  /// "Ehentai Tags"
  @override
  String get EHEhentai_Tags => "Ehentai Tags";
  /// "KEEP IT SAFE"
  @override
  String get EHKEEP_IT_SAFE => "KEEP IT SAFE";
  /// "Search"
  @override
  String get Search => "Search";
  /// "The search string is too short, and was ignored."
  @override
  String get SearchShort => "The search string is too short, and was ignored.";
  /// "No this found"
  @override
  String get SearchNot_found => "No this found";
  /// "Download"
  @override
  String get Download => "Download";
  /// "Download Progress"
  @override
  String get DownloadProgress => "Download Progress";
  /// "Error Info"
  @override
  String get DownloadError_Info => "Error Info";
  /// "Done"
  @override
  String get DownloadDone => "Done";
  /// "Buffer"
  @override
  String get DownloadBuffer => "Buffer";
  /// "Total"
  @override
  String get DownloadTotal => "Total";
  /// "Save Local"
  @override
  String get DownloadSave_Local => "Save Local";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "CN"),
      Locale("en", "US")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("zh_CN" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}